% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/netgraph.R
\name{netgraph}
\alias{netgraph}
\title{Plotting of networks connectivity map}
\usage{
netgraph(map,layout=igraph::layout_with_kk,pertu=FALSE,inter=NULL,
      cutoff=NULL,main=NULL,digits=2,v.type="circle",p.type="rectangle",
      outfile=NULL, ...)
}
\arguments{
\item{map}{A list containing the connectivity map (link matrix) of a network, and local matrix responses to perturbations}

\item{layout}{Either a data.frame containing the x and y coordinates and the color of the vertex in the network,
or a layout function from the igraph package. Default uses the "layout_with_kk" igraph layout.}

\item{pertu}{A boolean specifying if perturbations should be plotted as vertex in the network.}

\item{inter}{It takes the confidence interval calculated by the interval function and marks each connectivity coefficient
with an asterisk if the coefficient is significant.}

\item{cutoff}{Minimum value for a connectivity link coefficient between two modules for being plotted.}

\item{main}{A character string giving the title of the plot.}

\item{digits}{Number of digits to be plotted for each connectivity coefficient.}

\item{v.type}{Vertex type for biological modules. One of “none”, “circle”, “square”, “csquare”, “rectangle”
“crectangle”, “vrectangle”, “pie”, “raster”, or “sphere”.}

\item{p.type}{Vertex type for perturbations. One of “none”, “circle”, “square”, “csquare”, “rectangle”
“crectangle”, “vrectangle”, “pie”, “raster”, or “sphere”.}

\item{outfile}{Optional. A character string giving the name of the output file in xml format.}

\item{...}{Arguments to be passed to igraph plot such as vertex and edges plotting parameters.}
}
\value{
If layout is an igraph function it returns a data.frame containing the coordinates of the layout selected.
If outfile is not NULL exports the network graph in xml file format.
}
\description{
Plots a graphic representation of a biological network connectivity map calculated by MRA.
}
\examples{
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
sd.mean=data2sdmean(data)
rules=c("Et->Luciferase","E2+siRIP140->RIP140","E2+siLCoR->LCoR","E2->0")
matp=read.rules(rules)
map=mra(sd.mean$mean,matp)
inter=interval(sd.mean$mean,sd.mean$sd,matp,nrep=6)
netgraph(map,inter=inter)
}
