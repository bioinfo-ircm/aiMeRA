data=lapply(paste0(obj,temp),data.table::fread,data.table=FALSE,dec=dec)
if(any(sapply(data,ncol)==1))
{
if(sum(sapply(data,ncol)==1)>1)
stop("Only one rules file is allowed")
if(all(sapply(unlist(data[sapply(data,ncol)==1]),is.character)))
{
pert.tab= c(colnames(data[sapply(data,ncol)==1][[1]]),unlist(data[sapply(data,ncol)==1]))
data=data[sapply(data,ncol)!=1]
}
else
stop("Wrong format in file with perturbation rules")
}
else
stop("File with perturbation rules was not found")
}
else if (is.data.frame(obj))
data=list(obj)
else
data=obj
if(!is.null(pert.tab))
{
if((is.data.frame(pert.tab)|is.matrix(pert.tab)))
{
temp=sapply(colnames(pert.tab),function(x)paste(x,rownames(pert.tab)[!!pert.tab[,x]],sep = "->"))
temp[colSums(pert.tab)==0]=paste0(temp[colSums(pert.tab)==0],"0")
pert.tab=temp
}
if(any(grepl(" ",pert.tab)))
pert.tab=gsub(" ","",pert.tab)
aux=strsplit(pert.tab,"->")
if(!any(grepl("*->0",pert.tab)))
stop("The basal line is not specified in the perturbation rules file")
if(sum(grepl("*->0$",pert.tab))>1)
stop("The basal line is two times defined ")
if(any(duplicated(sapply(aux,function(x)x[1])[sapply(aux,function(x)x[1])!="0"])))
stop("At least one perturbation affect more than one module in the perturbation rules file")
if(any(duplicated(sapply(aux,function(x)x[2]))))
stop("One or more modules are affected by more than one perturbation in the perturbation rules file")
if(!all(sapply(aux[!grepl("^0->*",pert.tab)], function(x)x[1]%in%colnames(data[[1]]))))
stop("At least one name of perturbations in the perturbations rules file do not correspond to perturbations names in data tables")
if(!all(sapply(aux[!grepl("*->0$",pert.tab)], function(x)x[2]%in%switch(2-is.character(data[[1]][,1]),data[[1]][,1],rownames(data[[1]])))))
stop("At least one name of modules in the perturbation rules file do not correspond to modules names in data tables")
}
if (any(sapply(data,ncol)<4))
stop("Columns in data tables must contain at least two perturbations for two modules, modules names, and the basal line")
if (!any(sapply(data,function(x)is.character(x[,1])|is.character(colnames(x))  )))
stop("First column of each data table must contain the names of modules")
#if (any(sapply(data,function(x){!any(sapply(x,class)=="character")})))
#stop(paste("Column with modules names was not found in file:",temp[sapply(data,function(x){!any(sapply(x,class)=="character")})]))
data=lapply(data,function(x){row.names(x)=as.character(x[,1]);x})
data=lapply(data,function(x)x[,-1])
if(length(data)>1)
{
aux=Reduce(paste,lapply(data, colnames))
aux=strsplit(aux," ")
if(!all(sapply(aux, function(x)all(x[1]==x))))
stop("One or more column names is not equal to column names in other data tables")
aux=Reduce(paste,lapply(data, rownames))
aux=strsplit(aux," ")
if(!all(sapply(aux, function(x)all(x[1]==x))))
stop("One or more row names is not equal to row names in other data tables")
return(data)
}
return(data[[1]])
}
res=tryCatch(mra(hyb,xind),error=function(e)e)
res
i
hyb
xind
mra(hyb,xindd)
mra(hyb,xind)
pert.tab=xind
!is.null(pert.tab)
if((is.data.frame(pert.tab)|is.matrix(pert.tab)))
{
temp=sapply(colnames(pert.tab),function(x)paste(x,rownames(pert.tab)[!!pert.tab[,x]],sep = "->"))
temp[colSums(pert.tab)==0]=paste0(temp[colSums(pert.tab)==0],"0")
pert.tab=temp
}
pert.tab
if(any(grepl(" ",pert.tab)))
pert.tab=gsub(" ","",pert.tab)
aux=strsplit(pert.tab,"->")
aux
if(!any(grepl("*->0",pert.tab)))
stop("The basal line is not specified in the perturbation rules file")
if(sum(grepl("*->0$",pert.tab))>1)
stop("The basal line is two times defined ")
if(any(duplicated(sapply(aux,function(x)x[1])[sapply(aux,function(x)x[1])!="0"])))
stop("At least one perturbation affect more than one module in the perturbation rules file")
if(any(duplicated(sapply(aux,function(x)x[2]))))
stop("One or more modules are affected by more than one perturbation in the perturbation rules file")
if(!all(sapply(aux[!grepl("^0->*",pert.tab)], function(x)x[1]%in%colnames(data[[1]]))))
stop("At least one name of perturbations in the perturbations rules file do not correspond to perturbations names in data tables")
if(!all(sapply(aux[!grepl("^0->*",pert.tab)], function(x)x[1]%in%colnames(data[[1]]))))
stop("At least one name of perturbations in the perturbations rules file do not correspond to perturbations names in data tables")
aux[!grepl("^0->*",pert.tab)]
head(hyb)
data=xind
data=list(data)
data
data=hyb
data=list(data)
data
sapply(aux[!grepl("^0->*",pert.tab)], function(x)x[1]%in%colnames(data[[1]])
)
aux[!grepl("^0->*",pert.tab)]
aux[!grepl("^0->*",pert.tab)]
sapply(aux[!grepl("^0->*",pert.tab)], function(x)x[1]%in%colnames(data[[1]]))
all(sapply(aux[!grepl("^0->*",pert.tab)], function(x)x[1]%in%colnames(data[[1]]))
)
data="C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/table_moyenne.csv"
xqpcr=as.matrix(read.table(data,sep=";",header = T,check.names = F,row.names = 1))
xqpcr=xqpcr[-9,]
x1=as.matrix(read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
xrnaseq=(x2+x1)/2
hyb=rbind(xqpcr,xrnaseq)
lb="E2"
chip=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/E2-cross-chipseq-full.txt",header = F,sep = "\t",stringsAsFactors = F)$V1
xind=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->{Luc}ERa","E2->0","0->bid"))
data="C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/table_moyenne.csv"
xqpcr=as.matrix(read.table(data,sep=";",header = T,check.names = F,row.names = 1))
xqpcr=xqpcr[-9,]
x1=as.matrix(read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
xrnaseq=(x2+x1)/2
hyb=rbind(xqpcr,xrnaseq)
lb="E2"
chip=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/E2-cross-chipseq-full.txt",header = F,sep = "\t",stringsAsFactors = F)$V1
xind=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->{Luc}ERa","E2->0","0->bid"))
genes_E2=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/gene-selection-E2-Et.txt",sep="\t",header = T,stringsAsFactors = F)
genes_RIP=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/gene-selection-RIP140-E2.txt",sep="\t",header = T,stringsAsFactors = F)
genes_LCOR=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/gene-selection-LCoR-E2.txt",sep="\t",header = T,stringsAsFactors = F)
genes_LCOR_RIP=unique(c(genes_LCOR$genes,genes_RIP$genes))
#genes=genes[genes$genes%in%chip,"genes"]
#genes=genes[,"genes"]
#genes=rownames(xrnaseq)
#genes=genes[genes$genes%in%unique(c(rownames(siLC_2sis),rownames(siRIP_2sis))),"genes"]
genes=genes_E2[genes_E2$genes%in%genes_LCOR_RIP,"genes"]
genes=genes[genes%in%chip]
cond="E2+siLCoR+siRIP140"
cond_all_E2=c("Et",cond,"E2+siRIP140","E2+siLCoR","E2")
pred=vector()
err_rel=vector()
for(i in genes)
{
if(sum(hyb[i,colnames(xind)])<=length(cond_all_E2)*10)
{
print(i)
next()
}
rownames(xind)[4]=i
res=tryCatch(mra(hyb,xind),error=function(e)e)
if(any(class(res)=="error")|is.null(res))
next()
rpa=diag(res$local_matrix)
rpa[3:4]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))
b=hyb[rownames(res$link_matrix),cond]
pred[i]=round(a[4])
err_rel[i]=abs(a[4]-b[4])/b[4]
}
res
i
genes
err_rel
pert.tab=xind
data=list(hyb)
if(!is.list(obj)&is.vector(obj))
{
if(length(obj)>1)
stop("Only one path to the data tables and rules table is allowed")
temp=list.files(obj)
if (any(length(temp)==c(0,1)))
stop("At least one data table and a perturbation rules file are required")
data=lapply(paste0(obj,temp),data.table::fread,data.table=FALSE,dec=dec)
if(any(sapply(data,ncol)==1))
{
if(sum(sapply(data,ncol)==1)>1)
stop("Only one rules file is allowed")
if(all(sapply(unlist(data[sapply(data,ncol)==1]),is.character)))
{
pert.tab= c(colnames(data[sapply(data,ncol)==1][[1]]),unlist(data[sapply(data,ncol)==1]))
data=data[sapply(data,ncol)!=1]
}
else
stop("Wrong format in file with perturbation rules")
}
else
stop("File with perturbation rules was not found")
}
obj=data
if(!is.list(obj)&is.vector(obj))
{
if(length(obj)>1)
stop("Only one path to the data tables and rules table is allowed")
temp=list.files(obj)
if (any(length(temp)==c(0,1)))
stop("At least one data table and a perturbation rules file are required")
data=lapply(paste0(obj,temp),data.table::fread,data.table=FALSE,dec=dec)
if(any(sapply(data,ncol)==1))
{
if(sum(sapply(data,ncol)==1)>1)
stop("Only one rules file is allowed")
if(all(sapply(unlist(data[sapply(data,ncol)==1]),is.character)))
{
pert.tab= c(colnames(data[sapply(data,ncol)==1][[1]]),unlist(data[sapply(data,ncol)==1]))
data=data[sapply(data,ncol)!=1]
}
else
stop("Wrong format in file with perturbation rules")
}
else
stop("File with perturbation rules was not found")
}
else if (is.data.frame(obj))
data=list(obj)
else
data=obj
data
pert.tab
if(!is.null(pert.tab))
if(!is.null(pert.tab))
{
if((is.data.frame(pert.tab)|is.matrix(pert.tab)))
{
temp=sapply(colnames(pert.tab),function(x)paste(x,rownames(pert.tab)[!!pert.tab[,x]],sep = "->"))
temp[colSums(pert.tab)==0]=paste0(temp[colSums(pert.tab)==0],"0")
pert.tab=temp
}
if(any(grepl(" ",pert.tab)))
pert.tab=gsub(" ","",pert.tab)
aux=strsplit(pert.tab,"->")
if(!any(grepl("*->0",pert.tab)))
stop("The basal line is not specified in the perturbation rules file")
if(sum(grepl("*->0$",pert.tab))>1)
stop("The basal line is two times defined ")
if(any(duplicated(sapply(aux,function(x)x[1])[sapply(aux,function(x)x[1])!="0"])))
stop("At least one perturbation affect more than one module in the perturbation rules file")
if(any(duplicated(sapply(aux,function(x)x[2]))))
stop("One or more modules are affected by more than one perturbation in the perturbation rules file")
if(!all(sapply(aux[!grepl("^0->*",pert.tab)], function(x)x[1]%in%colnames(data[[1]]))))
stop("At least one name of perturbations in the perturbations rules file do not correspond to perturbations names in data tables")
if(!all(sapply(aux[!grepl("*->0$",pert.tab)], function(x)x[2]%in%switch(2-is.character(data[[1]][,1]),data[[1]][,1],rownames(data[[1]])))))
stop("At least one name of modules in the perturbation rules file do not correspond to modules names in data tables")
}
if (any(sapply(data,ncol)<4))
stop("Columns in data tables must contain at least two perturbations for two modules, modules names, and the basal line")
if (!any(sapply(data,function(x)is.character(x[,1])|is.character(colnames(x))  )))
stop("First column of each data table must contain the names of modules")
#if (any(sapply(data,function(x){!any(sapply(x,class)=="character")})))
#stop(paste("Column with modules names was not found in file:",temp[sapply(data,function(x){!any(sapply(x,class)=="character")})]))
data=lapply(data,function(x){row.names(x)=as.character(x[,1]);x})
data=lapply(data,function(x)x[,-1])
if(length(data)>1)
{
aux=Reduce(paste,lapply(data, colnames))
aux=strsplit(aux," ")
if(!all(sapply(aux, function(x)all(x[1]==x))))
stop("One or more column names is not equal to column names in other data tables")
aux=Reduce(paste,lapply(data, rownames))
aux=strsplit(aux," ")
if(!all(sapply(aux, function(x)all(x[1]==x))))
stop("One or more row names is not equal to row names in other data tables")
return(data)
}
data
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
data
res(hyb;xind)
res(hyb,xind)
mra(hyb,xind)
head(hyb)
xind
hyb["AOX1",]
library(aiMeRA)
data.setup
data="C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/table_moyenne.csv"
xqpcr=as.matrix(read.table(data,sep=";",header = T,check.names = F,row.names = 1))
xqpcr=xqpcr[-9,]
x1=as.matrix(read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
xrnaseq=(x2+x1)/2
hyb=rbind(xqpcr,xrnaseq)
lb="E2"
chip=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/E2-cross-chipseq-full.txt",header = F,sep = "\t",stringsAsFactors = F)$V1
xind=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->{Luc}ERa","E2->0","0->bid"))
genes_E2=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/gene-selection-E2-Et.txt",sep="\t",header = T,stringsAsFactors = F)
genes_RIP=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/gene-selection-RIP140-E2.txt",sep="\t",header = T,stringsAsFactors = F)
genes_LCOR=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/gene-selection-LCoR-E2.txt",sep="\t",header = T,stringsAsFactors = F)
genes_LCOR_RIP=unique(c(genes_LCOR$genes,genes_RIP$genes))
#genes=genes[genes$genes%in%chip,"genes"]
#genes=genes[,"genes"]
#genes=rownames(xrnaseq)
#genes=genes[genes$genes%in%unique(c(rownames(siLC_2sis),rownames(siRIP_2sis))),"genes"]
genes=genes_E2[genes_E2$genes%in%genes_LCOR_RIP,"genes"]
genes=genes[genes%in%chip]
cond="E2+siLCoR+siRIP140"
cond_all_E2=c("Et",cond,"E2+siRIP140","E2+siLCoR","E2")
pred=vector()
err_rel=vector()
length(genes)
i=genes[1]
xind
rownames(xind)[4]=i
res=tryCatch(mra(hyb,xind),error=function(e)e)
res
tab=hyb
matp=xind
data.setup(tab,matp)
obj=tab
pert.tab=matp
pert.tab
matp
obj
!is.list(obj)&is.vector(obj)
is.data.frame(obj)
data=obj
data
obj
is.data.frame(obj)
is.matrix(obj)
library(aiMeRA)
data.setup()
data.setup
data="C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/table_moyenne.csv"
xqpcr=as.matrix(read.table(data,sep=";",header = T,check.names = F,row.names = 1))
xqpcr=xqpcr[-9,]
x1=as.matrix(read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
xrnaseq=(x2+x1)/2
hyb=rbind(xqpcr,xrnaseq)
lb="E2"
chip=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/E2-cross-chipseq-full.txt",header = F,sep = "\t",stringsAsFactors = F)$V1
xind=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->{Luc}ERa","E2->0","0->bid"))
genes_E2=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/gene-selection-E2-Et.txt",sep="\t",header = T,stringsAsFactors = F)
genes_RIP=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/gene-selection-RIP140-E2.txt",sep="\t",header = T,stringsAsFactors = F)
genes_LCOR=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/gene-selection-LCoR-E2.txt",sep="\t",header = T,stringsAsFactors = F)
genes_LCOR_RIP=unique(c(genes_LCOR$genes,genes_RIP$genes))
#genes=genes[genes$genes%in%chip,"genes"]
#genes=genes[,"genes"]
#genes=rownames(xrnaseq)
#genes=genes[genes$genes%in%unique(c(rownames(siLC_2sis),rownames(siRIP_2sis))),"genes"]
genes=genes_E2[genes_E2$genes%in%genes_LCOR_RIP,"genes"]
genes=genes[genes%in%chip]
cond="E2+siLCoR+siRIP140"
cond_all_E2=c("Et",cond,"E2+siRIP140","E2+siLCoR","E2")
pred=vector()
err_rel=vector()
for(i in genes)
{
if(sum(hyb[i,colnames(xind)])<=length(cond_all_E2)*10)
{
print(i)
next()
}
rownames(xind)[4]=i
res=tryCatch(mra(hyb,xind),error=function(e)e)
if(any(class(res)=="error")|is.null(res))
next()
rpa=diag(res$local_matrix)
rpa[3:4]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))
b=hyb[rownames(res$link_matrix),cond]
pred[i]=round(a[4])
err_rel[i]=abs(a[4]-b[4])/b[4]
}
err_rel
pred=vector()
err_rel=vector()
for(i in genes)
{
if(sum(hyb[i,colnames(xind)])<=length(cond_all_E2)*10)
{
print(i)
next()
}
rownames(xind)[4]=i
res=tryCatch(mra(hyb,xind),error=function(e)e)
if(any(class(res)=="error")|is.null(res))
next()
rpa=diag(res$local_matrix)
rpa[3:4]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))
b=hyb[rownames(res$link_matrix),cond]
pred[i]=round(a[4])
err_rel[i]=abs(a[4]-b[4])/b[4]
}
mra=function(tab,matp)
{
#data.setup(tab,matp)
if(!is.matrix(matp))
matp=as.matrix(matp)
lb=colnames(matp)[colSums(matp)==0]
gl=tab[rownames(matp),colnames(matp)[colnames(matp)!=lb]]
glb=tab[rownames(matp),lb]
Rp=as.matrix(2*(gl-glb)/(gl+glb))
if(ncol(Rp)==1)
{
rownames(Rp)=rownames(matp)
colnames(Rp)=colnames(matp)[colSums(matp)!=0]
}
if(any(rowSums(matp)==0))
{
aux=matrix(0,ncol=sum(rowSums(matp)==0),nrow=nrow(Rp))
colnames(aux)=rep("bid",sum(rowSums(matp)==0))
rownames(aux)=rownames(Rp)
aux[rowSums(matp)==0,]=diag(ncol(aux))
Rp=cbind(Rp,aux)
matp=cbind(matp,aux)
}
matp=matp[,colSums(matp)!=0]
rp=solve(diag(diag(matp%*%solve(Rp))))
rownames(rp)=rownames(Rp)
colnames(rp)=names(sort(apply(matp,2,function(x)which(x==1))))
r=-rp%*%matp%*%solve(Rp)
return(list(link_matrix=r,global_matrix=Rp,local_matrix=rp,glb=glb))
}
cond_all_E2=c("Et",cond,"E2+siRIP140","E2+siLCoR","E2")
pred=vector()
err_rel=vector()
for(i in genes)
{
if(sum(hyb[i,colnames(xind)])<=length(cond_all_E2)*10)
{
print(i)
next()
}
rownames(xind)[4]=i
res=tryCatch(mra(hyb,xind),error=function(e)e)
if(any(class(res)=="error")|is.null(res))
next()
rpa=diag(res$local_matrix)
rpa[3:4]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))
b=hyb[rownames(res$link_matrix),cond]
pred[i]=round(a[4])
err_rel[i]=abs(a[4]-b[4])/b[4]
}
err_rel
library(aiMeRA)
?mra
devtools::document()
library(aiMeRA)
devtools::document()
library(aiMeRA)
remove.packages("mrainr")
library(aiMeRA)
?mra
devtools::document()
library(aiMeRA)
?mra
devtools::document()
library(aiMeRA)
devtools::document()
devtools::document()
data="C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/table_moyenne.csv"
xqpcr=as.matrix(read.table(data,sep=";",header = T,check.names = F,row.names = 1))
xqpcr=xqpcr[-9,]
x1=as.matrix(read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
xrnaseq=(x2+x1)/2
hyb=rbind(xqpcr,xrnaseq)
lb="E2"
chip=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/E2-cross-chipseq-full.txt",header = F,sep = "\t",stringsAsFactors = F)$V1
xind=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->{Luc}ERa","E2->0","0->bid"))
genes_E2=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/gene-selection-E2-Et.txt",sep="\t",header = T,stringsAsFactors = F)
genes_RIP=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/gene-selection-RIP140-E2.txt",sep="\t",header = T,stringsAsFactors = F)
genes_LCOR=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra//activity_reporters/gene-selection-LCoR-E2.txt",sep="\t",header = T,stringsAsFactors = F)
genes_LCOR_RIP=unique(c(genes_LCOR$genes,genes_RIP$genes))
#genes=genes[genes$genes%in%chip,"genes"]
#genes=genes[,"genes"]
#genes=rownames(xrnaseq)
#genes=genes[genes$genes%in%unique(c(rownames(siLC_2sis),rownames(siRIP_2sis))),"genes"]
genes=genes_E2[genes_E2$genes%in%genes_LCOR_RIP,"genes"]
genes=genes[genes%in%chip]
cond="E2+siLCoR+siRIP140"
cond_all_E2=c("Et",cond,"E2+siRIP140","E2+siLCoR","E2")
pred=vector()
err_rel=vector()
for(i in genes)
{
if(sum(hyb[i,colnames(xind)])<=length(cond_all_E2)*10)
{
print(i)
next()
}
rownames(xind)[4]=i
res=tryCatch(mra(hyb,xind,check=F),error=function(e)e)
if(any(class(res)=="error")|is.null(res))
next()
rpa=diag(res$local_matrix)
rpa[3:4]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))
b=hyb[rownames(res$link_matrix),cond]
pred[i]=round(a[4])
err_rel[i]=abs(a[4]-b[4])/b[4]
}
res
mra
devtools::document()
devtools::document()
devtools::document()
mra
