hist(as.vector(Rps),breaks = 50,xlab = "R(replica 1) - R(replica 2)",main = "Histogram and theoretical normal density",freq = F)
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
genes
x1=x1[rownames(x1)%in%c(rownames(rules),genes),colnames(rules)]
x2=x2[rownames(x2)%in%c(rownames(rules),genes),colnames(rules)]
x1
#####? partir des Rps######
source("C:/Users/gabriel.jimenez/Dropbox/Thèse/dualpancher/some_stuff.R")
setwd("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/")
rules=read.rules(c("E2+siLCoR->LCOR","E2+siRIP140->NRIP1","Et->PGR","E2->0"))
genes=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/Publi/E2-chipseq-884-genes.txt",
sep="\t",header = F)$V1
#rules=read.rules(c("RA+siLCoR->LCOR","RA+siRIP140->NRIP1","Et->HOXA5","RA->0"))
lb = colnames(rules)[colSums(rules) == 0]
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
Rp1=global.matrix(x1,lb=lb)
Rp2=global.matrix(x2,lb=lb)
Rp1=Rp1[genes,colnames(rules)[-4]]
Rp1
Rp1=global.matrix(x1,lb=lb)
Rp1=Rp1[genes,colnames(rules)[-4]]
Rp2=global.matrix(x2,lb=lb)
Rp2=Rp2[genes,colnames(rules)[-4]]
Rp1
Rp2
setwd("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/activity_reporters/")
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
data=data2sdmean(data)
rules=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
chip=read.table("E2-cross-chipseq-full-2.txt",stringsAsFactors = F)$V1
e2genes=read.table("gene-selection-E2-Et.txt",sep="\t",header = T,stringsAsFactors = F,row.names = 1)
ragenes=read.table("gene-selection-RA-Et.txt",sep="\t",header = T,stringsAsFactors = F,row.names = 1)
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
xrnaseq=(x2+x1)/2
xrnaseq=xrnaseq[c(rownames(e2genes)[rownames(e2genes)%in%chip],"LCOR"),]
############################
lb="E2"
nrow(xrnaseq)
xind=read.rules(c("E2+siLCoR->LCOR","E2+siRIP140->NRIP1","Et->Luciferase","E2->0"))
res.luc=mra(data$mean,rules)
genes=rownames(xrnaseq)
no=vector()
tab=data.frame()
for(rep in genes) {
print(rep)
if(rep%in%c("NRIP1","LCOR"))
next()
rownames(xind)[3]=rep
res=tryCatch(mra(xrnaseq,xind),error=function(e)e)
if(any(class(res)=="error"))
{
no=c(no,rep)
next()
}
diag(res$link_matrix)=NA
ligne=round(as.vector(res$link_matrix)[!is.na(as.vector(res$link_matrix))],digits = 4)
tab=rbind(tab,ligne)
}
rownames(tab)=genes[!genes%in%c("NRIP1","LCOR")]
nrow(tab)
no
mra
#####? partir des Rps######
source("C:/Users/gabriel.jimenez/Dropbox/Thèse/dualpancher/some_stuff.R")
setwd("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/")
rules=read.rules(c("E2+siLCoR->LCOR","E2+siRIP140->NRIP1","Et->PGR","E2->0"))
genes=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/Publi/E2-chipseq-884-genes.txt",
sep="\t",header = F)$V1
#rules=read.rules(c("RA+siLCoR->LCOR","RA+siRIP140->NRIP1","Et->HOXA5","RA->0"))
lb = colnames(rules)[colSums(rules) == 0]
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
Rp1=global.matrix(x1,lb=lb)
Rp1=global.matrix(x1,lb=lb)
Rp1=Rp1[genes,colnames(rules)[-4]]
Rp2=global.matrix(x2,lb=lb)
Rp2=Rp2[genes,colnames(rules)[-4]]
Rps=c(as.vector(Rp1[,1]),as.vector(Rp2[,1]))
Rps=Rps[!is.nan(Rps)]
hist(as.vector(Rps),breaks = 50,xlab = "R(replica 1) - R(replica 2)",main = "Histogram and theoretical normal density",freq = F)
lines(seq(-2,2,by=.05),dnorm(seq(-2,2,by=.05),mean(Rps),sd(Rps)),col="blue",lwd=2,color="red")
#####? partir des Rps######
source("C:/Users/gabriel.jimenez/Dropbox/Thèse/dualpancher/some_stuff.R")
setwd("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/")
rules=read.rules(c("E2+siLCoR->LCOR","E2+siRIP140->NRIP1","Et->PGR","E2->0"))
genes=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/Publi/E2-chipseq-884-genes.txt",
sep="\t",header = F)$V1
#rules=read.rules(c("RA+siLCoR->LCOR","RA+siRIP140->NRIP1","Et->HOXA5","RA->0"))
lb = colnames(rules)[colSums(rules) == 0]
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
Rp1=global.matrix(x1,lb=lb)
Rp1=Rp1[genes,colnames(rules)[-4]]
Rp2=global.matrix(x2,lb=lb)
Rp2=Rp2[genes,colnames(rules)[-4]]
#Rps=c(as.vector(Rp1[,1]),as.vector(Rp2[,1]))
Rps=Rp1-Rp2
Rps
Rp1
Rp1
x1[rownames(Rp1),]
Rp1
x1[rownames(Rp1),colnames(Rp1)]
Rp1
x1[rownames(Rp1),colnames(rules)]
e2genes=read.table("gene-selection-E2-Et.txt",sep="\t",header = T,stringsAsFactors = F,row.names = 1)
head(e2genes)
e2genes["ALX1",]
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
xrnaseq=(x2+x1)/2
xrnaseq=xrnaseq[c(rownames(e2genes)[rownames(e2genes)%in%chip],"LCOR"),]
xrnaseq["ALX1",]
genes=rownames(genes)
genes
genes=rownames(xrnaseq)
genes
genes[genes=="LCOR"]
genes[genes=="ALX1"]
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
xrnaseq=(x2+x1)/2
xrnaseq=xrnaseq[c(rownames(e2genes)[rownames(e2genes)%in%chip]),]
genes=rownames(xrnaseq)
genes[genes=="ALX1"]
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
Rp1=global.matrix(x1,lb=lb)
Rp1=Rp1[genes,colnames(rules)[-4]]
Rp1
Rp2=global.matrix(x2,lb=lb)
Rp2=Rp2[genes,colnames(rules)[-4]]
Rps=c(as.vector(Rp1[,1]),as.vector(Rp2[,1]))
hist(Rps,breaks = 50)
fit_n  <- fitdist(Rps, "norm")
denscomp(fit_n, legendtext = plot.legend,lwd =2)
denscomp(fit_n, legendtext = plot.legend,lwd =2,breaks=50)
test=Rps[,1]
Rps
Rp1=global.matrix(x1,lb=lb)
Rp1=Rp1[genes,colnames(rules)[-4]]
Rp2=global.matrix(x2,lb=lb)
Rp2=Rp2[genes,colnames(rules)[-4]]
Rps=Rp1-Rp2
Rps
#Rps=c(as.vector(Rp1[,1]),as.vector(Rp2[,1]))
Rps=Rp1-Rp2
fit_n  <- fitdist(as.vector(Rps), "norm")
denscomp(fit_n, legendtext = plot.legend,lwd =2,breaks=50)
fit_n  <- fitdist(as.vector(Rps[,1]), "norm")
denscomp(fit_n, legendtext = plot.legend,lwd =2,breaks=50)
nrow(genes)
nrow(Rps)
write.table(Rps,)
getwd()
write.table(Rps,"Diff_Rps.txt",quote = F,sep = "\t")
Rps
Rp1=global.matrix(x1,lb=lb)
Rp1=Rp1[genes,colnames(rules)[-4]]
Rp2=global.matrix(x2,lb=lb)
Rp2=Rp2[genes,colnames(rules)[-4]]
ms=abs(Rp1-Rp2)
repeat
{
Rb=apply(ms,2,mean)
#Rb=mean(ms)
sig=Rb/1.128
lcs=sig*2.834
test=ms>lcs
test=rowSums(test)
test=names(test)[test!=0]
if(length(test)==0)
break
else
ms=ms[!rownames(ms)%in%test,]
}
ms
nrow(ms)
#Rps=c(as.vector(Rp1[,1]),as.vector(Rp2[,1]))
#Rps=as.vector(Rp1-Rp2)
Rps=Rp1-Rp2
Rps[rownames(ms),]
Rps=Rps[rownames(ms),]
fit_n  <- fitdist(as.vector(Rps[,1]), "norm")
denscomp(fit_n, legendtext = plot.legend,lwd =2,breaks=50)
Rps
nrow(Rps)
fit_n  <- fitdist(as.vector(Rps[,2]), "norm")
summary(fit_n)
plot.legend <- c("normal")
denscomp(fit_n, legendtext = plot.legend,lwd =2,breaks=50)
fit_n  <- fitdist(as.vector(Rps[,3]), "norm")
summary(fit_n)
plot.legend <- c("normal")
denscomp(fit_n, legendtext = plot.legend,lwd =2,breaks=50)
getwd()
Rd2markdown("C:/Users/gabriel.jimenez/Documents/GitHub/aiMeRA/man/ab.mra.Rd",outfile = "C:/Users/gabriel.jimenez/Documents/old_scripts_package/ab_mra")
Rd2markdown("C:/Users/gabriel.jimenez/Documents/GitHub/aiMeRA/man/ab.mra.Rd",outfile = "C:/Users/gabriel.jimenez/Documents/old_scripts_package/ab_mra")
Rd2markdown("C:/Users/gabriel.jimenez/Documents/GitHub/aiMeRA/man/mra.Rd",outfile = "C:/Users/gabriel.jimenez/Documents/old_scripts_package/mra")
Rd2markdown("C:/Users/gabriel.jimenez/Documents/GitHub/aiMeRA/man/netgraph.Rd",outfile = "C:/Users/gabriel.jimenez/Documents/old_scripts_package/netgraph")
?rnorm
Rd2markdown("C:/Users/gabriel.jimenez/Documents/GitHub/aiMeRA/man/interval.Rd",outfile = "C:/Users/gabriel.jimenez/Documents/old_scripts_package/interval")
library(aiMeRA)
vignette(aiMera)
vignette("aiMera")
vignette("aiMeRA")
vignette("limma")
vignette("lima")
vignette("ComplexHeatmap")
vignette("Complexheatmap")
vignette("complexheatmap")
Rd2markdown("C:/Users/gabriel.jimenez/Documents/GitHub/aiMeRA/man/ab.mra.Rd",outfile = "C:/Users/gabriel.jimenez/Documents/old_scripts_package/ab_mra")
sd.ex
library(aiMeRA)
sd.ex
sd.ex=sd.ex/sqrt(6)
sd.ex
usethis::use_data(sd.ex)
usethis::use_data(sd.ex,overwrite = TRUE)
library(aiMeRA)
sd.ex
library(Biobase)
library(GEOquery)
library(limma)
rm(list=ls())
gset <- getGEO("GSE56946", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL4133", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
#gsms <- "XXX111XXXXXXXXXXXXXXXXXXXXXXXXXXX000XXXXXXXXX" # H2NES_ERa_4h_E2 VS WT_ERa_Vehicle
gsms <- "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX000XXX111XXX" # H2NES_ERa_4h_E2 VS Ishikawa_vector_Vehicle
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
test=gset
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
#treat=factor(rep(c(rep("Ctr",3),rep("E2",3)),2),levels = c("Ctr","E2"))
design <- model.matrix(~0+description, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G2-G0, G1-G0, G2-G1, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="BH", sort.by="B", number=nrow(fit2$genes))
#tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","Gene.symbol","Gene.title"))
fit2$genes
rm(list=ls())
gset <- getGEO("GSE56946", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL4133", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
#gsms <- "XXX111XXXXXXXXXXXXXXXXXXXXXXXXXXX000XXXXXXXXX" # H2NES_ERa_4h_E2 VS WT_ERa_Vehicle
gsms <- "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX000XXX111XXX" # H2NES_ERa_4h_E2 VS Ishikawa_vector_Vehicle
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
test=gset
test
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
#treat=factor(rep(c(rep("Ctr",3),rep("E2",3)),2),levels = c("Ctr","E2"))
design <- model.matrix(~0+description, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="BH", sort.by="B", number=nrow(fit2$genes))
#tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","Gene.symbol","Gene.title"))
tT
colnames(tT)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
#tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","Gene.symbol","Gene.title"))
print(tT[tT$Gene.symbol=="NRIP1",])
print(tT[tT$Gene.symbol=="LCOR",])
barplot(exprs(test)[which(fit2$genes$Gene.symbol=="LCOR"),])
barplot(exprs(test)[which(fit2$genes$Gene.symbol=="NRIP1"),])
# group names for all samples
gsms <- "XXX111XXXXXXXXXXXXXXXXXXXXXXXXXXX000XXXXXXXXX" # H2NES_ERa_4h_E2 VS WT_ERa_Vehicle
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
test=gset
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
#treat=factor(rep(c(rep("Ctr",3),rep("E2",3)),2),levels = c("Ctr","E2"))
design <- model.matrix(~0+description, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="BH", sort.by="B", number=nrow(fit2$genes))
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
#tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","Gene.symbol","Gene.title"))
print(tT[tT$Gene.symbol=="NRIP1",])
print(tT[tT$Gene.symbol=="LCOR",])
barplot(exprs(test)[which(fit2$genes$Gene.symbol=="LCOR"),])
barplot(exprs(test)[which(fit2$genes$Gene.symbol=="NRIP1"),])
exprs(test)
length(fit2$genes$Gene.symbol)
nrow(exprs(test))
head(tT)
library(Biobase)
library(GEOquery)
library(limma)
rm(list=ls())
gset <- getGEO("GSE56946", GSEMatrix =TRUE, AnnotGPL=TRUE)
gsms <- "XXX111XXXXXXXXXXXXXXXXXXXXXXXXXXX000XXXXXXXXX" # H2NES_ERa_4h_E2 VS WT_ERa_Vehicle
#gsms <- "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX000XXX111XXX" # H2NES_ERa_4h_E2 VS Ishikawa_vector_Vehicle
#gsms <- "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX111000XXXXXXXXX" # H2NES_ERa_4h_E2 VS H2NES_ERa_Vehicle
#gsms <- "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX000111" #Vector_4h_E2 VS Vector_vehicle
#gsms <- "XXX000111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" #WT_4h_E2 VS WT_vehicle
#gsms <- "XXXXXXXXXXXX000111XXXXXXXXXXXXXXXXXXXXXXXXXXX"  #H2_4h_E2 VS H2_vehicle
#gsms <- "XXXXXXXXXXXXXXXXXXXXX000111XXXXXXXXXXXXXXXXXX"  #AA_4h_E2 VS AA_vehicle
#gsms <- "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX000111XXXXXXXXX"  #H2NES_4h_E2 VS H2NES_vehicle
#gsms <- "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX000111222XXXXXX"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
test=gset
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
#treat=factor(rep(c(rep("Ctr",3),rep("E2",3)),2),levels = c("Ctr","E2"))
design <- model.matrix(~0+description, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="BH", sort.by="adj.P.val", number=nrow(fit2$genes))
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
#tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","Gene.symbol","Gene.title"))
library(Biobase)
library(GEOquery)
library(limma)
rm(list=ls())
gset <- getGEO("GSE56946", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL4133", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- "XXX111XXXXXXXXXXXXXXXXXXXXXXXXXXX000XXXXXXXXX" # H2NES_ERa_4h_E2 VS WT_ERa_Vehicle
#gsms <- "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX000XXX111XXX" # H2NES_ERa_4h_E2 VS Ishikawa_vector_Vehicle
#gsms <- "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX111000XXXXXXXXX" # H2NES_ERa_4h_E2 VS H2NES_ERa_Vehicle
#gsms <- "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX000111" #Vector_4h_E2 VS Vector_vehicle
#gsms <- "XXX000111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" #WT_4h_E2 VS WT_vehicle
#gsms <- "XXXXXXXXXXXX000111XXXXXXXXXXXXXXXXXXXXXXXXXXX"  #H2_4h_E2 VS H2_vehicle
#gsms <- "XXXXXXXXXXXXXXXXXXXXX000111XXXXXXXXXXXXXXXXXX"  #AA_4h_E2 VS AA_vehicle
#gsms <- "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX000111XXXXXXXXX"  #H2NES_4h_E2 VS H2NES_vehicle
#gsms <- "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX000111222XXXXXX"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
test=gset
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
#treat=factor(rep(c(rep("Ctr",3),rep("E2",3)),2),levels = c("Ctr","E2"))
design <- model.matrix(~0+description, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="BH", sort.by="adj.P.val", number=nrow(fit2$genes))
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
tT <- topTable(fit2, adjust="BH", sort.by="adj.P.Val", number=nrow(fit2$genes))
tT <- topTable(fit2, adjust="BH", sort.by="logFC", number=nrow(fit2$genes))
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
#tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","Gene.symbol","Gene.title"))
print(tT[tT$Gene.symbol=="NRIP1",])
print(tT[tT$Gene.symbol=="LCOR",])
barplot(exprs(test)[which(fit2$genes$Gene.symbol=="LCOR"),])
barplot(exprs(test)[which(fit2$genes$Gene.symbol=="NRIP1"),])
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
library(data.table)
fread("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/Publi/sci-reports/sd.ex.R",data.table = F)
fread("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/Publi/sci-reports/sd.ex.R",data.table = F,col.names = 1)
fread("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/Publi/sci-reports/sd.ex.R",data.table = F)
sd.ex=fread("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/Publi/sci-reports/sd.ex.R",data.table = F)
rownames(sd.ex)=sd.ex$V1
sd.ex=sd.ex[,-1]
sd.ex
usethis::use_data(sd.ex)
usethis::use_data(sd.ex,overwrite = T)
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
library(aiMeRA)
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
lb="E2"
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
data.rp=lapply(data, function(x)2*(x[,colnames(x)!=]-x[,lb])/(x[,colnames(x)!=lb]+x[,lb]))
data.rp=lapply(data, function(x)2*(x[,colnames(x)!=lb]-x[,lb])/(x[,colnames(x)!=lb]+x[,lb]))
data.rp
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
data.mean=data2sdmean(tec.av)$mean
data.rp=2*(data.mean[,colnames(data.mean)!=lb]-data.mean[,lb])/(data.mean[,colnames(data.mean)!=lb]+data.mean[,lb])
data.rp
rules=c("Et->Luciferase","E2+siRIP140->RIP140","E2+siLCoR->LCoR","E2->0")
matp=read.rules(rules)
res=mra(data.rp.mean,rules,Rp = T,check = F)
res=mra(data.rp,rules,Rp = T,check = F)
res=mra(data.rp,matp,Rp = T,check = F)
interval(data.mean,sd.tab=sd.ex,matp=matp,Rp=T)
sd.ex
data.mean
inter=interval(data.rp,sd.tab=sd.ex,matp=matp,Rp=T)
inter
inter=interval(data.rp,sd.tab=sd.ex,matp=matp,Rp=T)
data.rp
inter
inter=interval(data.rp,sd.tab=sd.ex,matp=matp,Rp=T)
inter
matp
rules=c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0")
matp=read.rules(rules)
matp
interval(data.rp,sd.tab=sd.ex,matp=matp,Rp=T)
library(aiMeRA)
?interval
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(devtools)
install.packages("devtools")
library(devtools)
SD;EX
sd.ex
library(aiMeRA)
?interval
library(aiMeRA)
?interval
library(aiMeRA)
?interval
?netgraph
