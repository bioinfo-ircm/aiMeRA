names(inter)=rownames(res$link_matrix)
inter
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
#matp=read.rules(c("E2+RA+siLCoR->LCoR","E2+RA+siRIP140->RIP140","E2->Hoxa5","RA->Luciferase","E2+RA->0"))
n=10000
nrep=6
lb=colnames(matp)[colSums(matp)==0]
pred=list()
for (i in 1:n)
{
xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(tab$sd)/sqrt(nrep)))
res=mra(xbruit,matp)
rpa=diag(res$local_matrix)
rpa[3]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))/tab$mean[rownames(res$link_matrix),lb]
if(i==1)
pred=as.list(a)
else
pred=lapply(1:length(a),function(j) c(pred[[j]],a[j]))
}
inter=lapply(pred, function(x) sort(x)[c((n*0.025)+1,(n*0.975)-1)])
inter=inter[sapply(inter,function(x)x[1]!=x[2])]
names(inter)=rownames(res$link_matrix)
inter
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
tab=data2sdmean(data)
cond="E2+RA+siLCoR+siRIP140"
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
#matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
matp=read.rules(c("E2+RA+siLCoR->LCoR","E2+RA+siRIP140->RIP140","E2->Hoxa5","RA->Luciferase","E2+RA->0"))
n=10000
nrep=6
lb=colnames(matp)[colSums(matp)==0]
pred=list()
for (i in 1:n)
{
xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(tab$sd)/sqrt(nrep)))
res=mra(xbruit,matp)
rpa=diag(res$local_matrix)
rpa[3:4]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))/tab$mean[rownames(res$link_matrix),lb]
if(i==1)
pred=as.list(a)
else
pred=lapply(1:length(a),function(j) c(pred[[j]],a[j]))
}
inter=lapply(pred, function(x) sort(x)[c((n*0.025)+1,(n*0.975)-1)])
inter=inter[sapply(inter,function(x)x[1]!=x[2])]
names(inter)=rownames(res$link_matrix)
inter
devtools::document()
devtools::document()
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
sd.mean=data2sdmean(tec.av)
rules=c("Et->Luciferase","E2+siRIP140->RIP140","E2+siLCoR->LCoR","E2->0")
matp=read.rules(rules)
interval(sd.mean$mean,sd.ex,matp,nrep=6)
interval=function(tab,sd.tab,matp,n=10000,nrep=2)
{
if(!is.matrix(sd.tab))
sd.tab=as.matrix(sd.tab)
data.setup(tab,matp)
lb=colnames(matp)[colSums(matp)==0]
genes=rownames(matp)
rlist=list()
rplist=list()
for (i in 1:n)
{
pertus=colnames(matp)
xbruit=tab+rnorm(ncol(tab)*nrow(tab),0,(sd.tab/sqrt(nrep)))
res=mra(xbruit,matp,check=FALSE)
diag(res$link_matrix)=NA
r=as.vector(res$link_matrix)
rp=diag(res$local_matrix)
r=r[!is.na(r)]
if(i==1)
{
rlist=as.list(r)
rplist=as.list(rp)
next()
}
else
{
rlist=lapply(1:length(r),function(j) c(rlist[[j]],r[j]))
rplist=lapply(1:length(rp),function(j) c(rplist[[j]],rp[j]))
}
}
noms=expand.grid(rep(list(genes), 2))
noms=noms[!apply(noms,1,function(x)any(duplicated(x))),c("Var2","Var1")]
names(rlist)=apply(noms,1,function(x)paste0(x,collapse = "->"))
names(rplist)=paste0(colnames(res$local_matrix),"->",rownames(res$local_matrix))
inter=c(lapply(rlist, function(x) sort(x)[c((n*0.025)+1,(n*0.975)-1)]),
lapply(rplist, function(x) sort(x)[c((n*0.025)+1,(n*0.975)-1)]))
inter=inter[sapply(inter,function(x)x[1]!=x[2])]
inter=lapply(inter,function(x)round(x,digits = 2))
return(inter)
}
interval=function(tab,sd.tab,matp,n=10000,nrep=2)
{
if(!is.matrix(sd.tab))
sd.tab=as.matrix(sd.tab)
data.setup(tab,matp)
lb=colnames(matp)[colSums(matp)==0]
genes=rownames(matp)
rlist=list()
rplist=list()
for (i in 1:n)
{
pertus=colnames(matp)
xbruit=tab+rnorm(ncol(tab)*nrow(tab),0,(sd.tab/sqrt(nrep)))
res=mra(xbruit,matp,check=FALSE)
diag(res$link_matrix)=NA
r=as.vector(res$link_matrix)
rp=diag(res$local_matrix)
r=r[!is.na(r)]
if(i==1)
{
rlist=as.list(r)
rplist=as.list(rp)
next()
}
else
{
rlist=lapply(1:length(r),function(j) c(rlist[[j]],r[j]))
rplist=lapply(1:length(rp),function(j) c(rplist[[j]],rp[j]))
}
}
noms=expand.grid(rep(list(genes), 2))
noms=noms[!apply(noms,1,function(x)any(duplicated(x))),c("Var2","Var1")]
names(rlist)=apply(noms,1,function(x)paste0(x,collapse = "->"))
names(rplist)=paste0(colnames(res$local_matrix),"->",rownames(res$local_matrix))
#inter=c(lapply(rlist, function(x) sort(x)[c((n*0.025)+1,(n*0.975)-1)]),
#        lapply(rplist, function(x) sort(x)[c((n*0.025)+1,(n*0.975)-1)]))
inter=c(lapply(rlist, function(x) sort(x)[c((n*0.005)+1,(n*0.995)-1)]),
lapply(rplist, function(x) sort(x)[c((n*0.025)+1,(n*0.995)-1)]))
inter=inter[sapply(inter,function(x)x[1]!=x[2])]
inter=lapply(inter,function(x)round(x,digits = 2))
return(inter)
}
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
sd.mean=data2sdmean(tec.av)
rules=c("Et->Luciferase","E2+siRIP140->RIP140","E2+siLCoR->LCoR","E2->0")
matp=read.rules(rules)
interval(sd.mean$mean,sd.ex,matp,nrep=6)
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
interval(sd.mean$mean,sd.ex,matp,nrep=6)
devtools::document()
install.packages(root)
install.packages(roots)
install.packages("root")
install.packages("roots")
devtools::document()
setwd("C:/Users/gabriel.jimenez/Documents/GitHub/aiMeRA/")
devtools::document()
devtools::document()
library(aiMeRA)
interval()
aiMeRA::interval
#the variance of each variable was estimated employing an estimator optimized
#for a small sample size from Statistical Process Control theory
#(Wheeler and Chambers, 1992; Harter, 1960).
sd.ex
data
(estr1_A - estr1_B)
(data[1]-data[2])
(data[[1]]-data[[2])
(data[[1]]-data[[2]])
abs(data[[1]]-data[[2]])
abs(data[[1]]-data[[2]])+abs(data[[3]]-data[[4]])+abs(data[[5]]-data[[6]])
Rb=(abs(data[[1]]-data[[2]])+abs(data[[3]]-data[[4]])+abs(data[[5]]-data[[6]]))/
3
Rb/1.128
################################################# Ecart-type étendu ####################################################
Rb=(abs(data[[1]]-data[[2]])+abs(data[[3]]-data[[4]])+abs(data[[5]]-data[[6]]))/3
Rb/1.128
################################################# Ecart-type étendu ####################################################
Rb=(abs(data[[1]]-data[[2]])+abs(data[[3]]-data[[4]])+abs(data[[5]]-data[[6]]))/3
Rb/1.128
sd.ex
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
#We first average the technical replicates of each biological replicate
#and then only keep the (averaged) biological replicates for the calculation
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
sd.mean=data2sdmean(tec.av)
rules=c("Et->Luciferase","E2+siRIP140->RIP140","E2+siLCoR->LCoR","E2->0")
matp=read.rules(rules)
map=mra(sd.mean$mean,matp)
inter=interval(sd.mean$mean,sd.mean$sd,matp,nrep=6)
inter
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
#We first average the technical replicates of each biological replicate
#and then only keep the (averaged) biological replicates for the calculation
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
sd.mean=data2sdmean(tec.av)
rules=c("Et->Luciferase","E2+siRIP140->RIP140","E2+siLCoR->LCoR","E2->0")
matp=read.rules(rules)
#The variance of each variable was estimated employing an estimator optimized for a
#small sample size from Statistical Process Control theory (Wheeler and Chambers, 1992; Harter, 1960).
interval(sd.mean$mean,sd.ex,matp,nrep=6)
devtools::document()
library(aiMeRA)
aiMeRA::interval
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
#We first average the technical replicates of each biological replicate
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
#We first average the technical replicates of each biological replicate
#and then only keep the (averaged) biological replicates for the calculation
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
sd.mean=data2sdmean(tec.av)
rules=c("Et->Luciferase","E2+siRIP140->RIP140","E2+siLCoR->LCoR","E2->0")
matp=read.rules(rules)
map=mra(sd.mean$mean,matp)
inter=interval(sd.mean$mean,sd.ex,matp,nrep=6)
netgraph(map,inter=inter)
rules=c("E2+siRIP140->RIP140","E2+siLCoR->LCoR","E2->0")
matp=read.rules(rules)
map=mra(sd.mean$mean,matp)
inter=interval(sd.mean$mean,sd.ex,matp,nrep=6)
netgraph(map,inter=inter)
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
#We first average the technical replicates of each biological replicate
#and then only keep the (averaged) biological replicates for the calculation
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
sd.mean=data2sdmean(tec.av)
rules=c("Et->Luciferase","E2+siRIP140->RIP140","E2+siLCoR->LCoR","E2->0")
matp=read.rules(rules)
#The variance of each variable was estimated employing an estimator optimized for a
#small sample size from Statistical Process Control theory (Wheeler and Chambers, 1992; Harter, 1960).
interval(sd.mean$mean,sd.ex,matp,nrep=6)
interval(sd.mean$mean,sd.ex,matp,nrep=6,n=100000)
interval(sd.mean$mean,sd.ex,matp,nrep=6,n=50000)
interval(sd.mean$mean,sd.ex,matp,nrep=6,n=10000)
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
#matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
matp=read.rules(c("E2+RA+siLCoR->LCoR","E2+RA+siRIP140->RIP140","E2->Hoxa5","RA->Luciferase","E2+RA->0"))
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
#matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
matp=read.rules(c("E2+RA+siLCoR->LCoR","E2+RA+siRIP140->RIP140","E2->Hoxa5","RA->Luciferase","E2+RA->0"))
matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
interval(sd.mean$mean,sd.ex,matp,nrep=6)
matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","RA->0"))
interval(sd.mean$mean,sd.ex,matp,nrep=6)
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
#matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
matp=read.rules(c("E2+RA+siLCoR->LCoR","E2+RA+siRIP140->RIP140","E2->Hoxa5","RA->Luciferase","E2+RA->0"))
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
interval(sd.mean$mean,sd.ex,matp,nrep=6)
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
#matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
matp=read.rules(c("E2+RA+siLCoR->LCoR","E2+RA+siRIP140->RIP140","E2->Hoxa5","RA->Luciferase","E2+RA->0"))
interval(sd.mean$mean,sd.ex,matp,nrep=6)
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
tab=data2sdmean(data)
cond="E2+RA+siLCoR+siRIP140"
matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
#matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
#matp=read.rules(c("E2+RA+siLCoR->LCoR","E2+RA+siRIP140->RIP140","E2->Hoxa5","RA->Luciferase","E2+RA->0"))
n=10000
nrep=6
lb=colnames(matp)[colSums(matp)==0]
pred=list()
for (i in 1:n)
{
#xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(tab$sd)/sqrt(nrep)))
xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(sd.ex)/sqrt(nrep)))
res=mra(xbruit,matp)
rpa=diag(res$local_matrix)
rpa[3:4]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))/tab$mean[rownames(res$link_matrix),lb]
if(i==1)
pred=as.list(a)
else
pred=lapply(1:length(a),function(j) c(pred[[j]],a[j]))
}
pred=list()
for (i in 1:n)
{
#xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(tab$sd)/sqrt(nrep)))
xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(sd.ex)/sqrt(nrep)))
res=mra(xbruit,matp)
rpa=diag(res$local_matrix)
rpa[3]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))/tab$mean[rownames(res$link_matrix),lb]
if(i==1)
pred=as.list(a)
else
pred=lapply(1:length(a),function(j) c(pred[[j]],a[j]))
}
inter=lapply(pred, function(x) sort(x)[c((n*0.025)+1,(n*0.975)-1)])
inter=inter[sapply(inter,function(x)x[1]!=x[2])]
names(inter)=rownames(res$link_matrix)
inter
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
#matp=read.rules(c("E2+RA+siLCoR->LCoR","E2+RA+siRIP140->RIP140","E2->Hoxa5","RA->Luciferase","E2+RA->0"))
n=10000
nrep=6
lb=colnames(matp)[colSums(matp)==0]
pred=list()
for (i in 1:n)
{
#xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(tab$sd)/sqrt(nrep)))
xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(sd.ex)/sqrt(nrep)))
res=mra(xbruit,matp)
rpa=diag(res$local_matrix)
rpa[3]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))/tab$mean[rownames(res$link_matrix),lb]
if(i==1)
pred=as.list(a)
else
pred=lapply(1:length(a),function(j) c(pred[[j]],a[j]))
}
inter=lapply(pred, function(x) sort(x)[c((n*0.025)+1,(n*0.975)-1)])
inter=inter[sapply(inter,function(x)x[1]!=x[2])]
names(inter)=rownames(res$link_matrix)
inter
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
#matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
matp=read.rules(c("E2+RA+siLCoR->LCoR","E2+RA+siRIP140->RIP140","E2->Hoxa5","RA->Luciferase","E2+RA->0"))
n=10000
nrep=6
lb=colnames(matp)[colSums(matp)==0]
pred=list()
for (i in 1:n)
{
#xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(tab$sd)/sqrt(nrep)))
xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(sd.ex)/sqrt(nrep)))
res=mra(xbruit,matp)
rpa=diag(res$local_matrix)
rpa[3]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))/tab$mean[rownames(res$link_matrix),lb]
if(i==1)
pred=as.list(a)
else
pred=lapply(1:length(a),function(j) c(pred[[j]],a[j]))
}
inter=lapply(pred, function(x) sort(x)[c((n*0.025)+1,(n*0.975)-1)])
inter=inter[sapply(inter,function(x)x[1]!=x[2])]
names(inter)=rownames(res$link_matrix)
inter
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
tab=data2sdmean(data)
cond="E2+RA+siLCoR+siRIP140"
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
#matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
matp=read.rules(c("E2+RA+siLCoR->LCoR","E2+RA+siRIP140->RIP140","E2->Hoxa5","RA->Luciferase","E2+RA->0"))
n=10000
nrep=6
lb=colnames(matp)[colSums(matp)==0]
pred=list()
for (i in 1:n)
{
#xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(tab$sd)/sqrt(nrep)))
xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(sd.ex)/sqrt(nrep)))
res=mra(xbruit,matp)
rpa=diag(res$local_matrix)
rpa[3]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))/tab$mean[rownames(res$link_matrix),lb]
if(i==1)
pred=as.list(a)
else
pred=lapply(1:length(a),function(j) c(pred[[j]],a[j]))
}
inter=lapply(pred, function(x) sort(x)[c((n*0.025)+1,(n*0.975)-1)])
inter=inter[sapply(inter,function(x)x[1]!=x[2])]
names(inter)=rownames(res$link_matrix)
inter
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
tab=data2sdmean(data)
cond="E2+RA+siLCoR+siRIP140"
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
#matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
matp=read.rules(c("E2+RA+siLCoR->LCoR","E2+RA+siRIP140->RIP140","E2->Hoxa5","RA->Luciferase","E2+RA->0"))
n=10000
nrep=6
lb=colnames(matp)[colSums(matp)==0]
pred=list()
for (i in 1:n)
{
#xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(tab$sd)/sqrt(nrep)))
xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(sd.ex)/sqrt(nrep)))
res=mra(xbruit,matp)
rpa=diag(res$local_matrix)
rpa[3:4]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))/tab$mean[rownames(res$link_matrix),lb]
if(i==1)
pred=as.list(a)
else
pred=lapply(1:length(a),function(j) c(pred[[j]],a[j]))
}
inter=lapply(pred, function(x) sort(x)[c((n*0.025)+1,(n*0.975)-1)])
inter=inter[sapply(inter,function(x)x[1]!=x[2])]
names(inter)=rownames(res$link_matrix)
inter
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
tab=data2sdmean(data)
cond="E2+RA+siLCoR+siRIP140"
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
#matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
matp=read.rules(c("E2+RA+siLCoR->LCoR","E2+RA+siRIP140->RIP140","E2->Hoxa5","RA->Luciferase","E2+RA->0"))
n=10000
nrep=6
lb=colnames(matp)[colSums(matp)==0]
pred=list()
for (i in 1:n)
{
xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(tab$sd)/sqrt(nrep)))
#xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(sd.ex)/sqrt(nrep)))
res=mra(xbruit,matp)
rpa=diag(res$local_matrix)
rpa[3:4]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))/tab$mean[rownames(res$link_matrix),lb]
if(i==1)
pred=as.list(a)
else
pred=lapply(1:length(a),function(j) c(pred[[j]],a[j]))
}
inter=lapply(pred, function(x) sort(x)[c((n*0.025)+1,(n*0.975)-1)])
inter=inter[sapply(inter,function(x)x[1]!=x[2])]
names(inter)=rownames(res$link_matrix)
inter
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
tab=data2sdmean(data)
cond="E2+RA+siLCoR+siRIP140"
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
#matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
matp=read.rules(c("E2+RA+siLCoR->LCoR","E2+RA+siRIP140->RIP140","E2->Hoxa5","RA->Luciferase","E2+RA->0"))
n=50000
nrep=6
lb=colnames(matp)[colSums(matp)==0]
pred=list()
for (i in 1:n)
{
xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(tab$sd)/sqrt(nrep)))
#xbruit=tab$mean+rnorm(ncol(tab$mean)*nrow(tab$mean),0,(as.matrix(sd.ex)/sqrt(nrep)))
res=mra(xbruit,matp)
rpa=diag(res$local_matrix)
rpa[3:4]=0
aux=solve(res$link_matrix,-rpa)
a=(-res$glb*((aux+2)/(aux-2)))/tab$mean[rownames(res$link_matrix),lb]
if(i==1)
pred=as.list(a)
else
pred=lapply(1:length(a),function(j) c(pred[[j]],a[j]))
}
inter=lapply(pred, function(x) sort(x)[c((n*0.025)+1,(n*0.975)-1)])
inter=inter[sapply(inter,function(x)x[1]!=x[2])]
names(inter)=rownames(res$link_matrix)
inter
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
#We first average the technical replicates of each biological replicate
#and then only keep the (averaged) biological replicates for the calculation
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
sd.mean=data2sdmean(tec.av)
sd.mean
rules=c("Et->Luciferase","E2+siRIP140->RIP140","E2+siLCoR->LCoR","E2->0")
matp=read.rules(rules)
matp
#The variance of each variable was estimated employing an estimator optimized for a
#small sample size from Statistical Process Control theory (Wheeler and Chambers, 1992; Harter, 1960).
interval(sd.mean$mean,sd.ex,matp,nrep=6)
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
#We first average the technical replicates of each biological replicate
#and then only keep the (averaged) biological replicates for the calculation
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
sd.mean=data2sdmean(tec.av)
rules=c("Et->Luciferase","E2+siRIP140->RIP140","E2+siLCoR->LCoR","E2->0")
matp=read.rules(rules)
#The variance of each variable was estimated employing an estimator optimized for a
#small sample size from Statistical Process Control theory (Wheeler and Chambers, 1992; Harter, 1960).
interval(sd.mean$mean,sd.ex,matp,nrep=6)
sd.ex
data
data2sdmean(data)$sd
data2sdmean(data)$sd
sd.ex
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
#We first average the technical replicates of each biological replicate
#and then only keep the (averaged) biological replicates for the calculation
tec.av=list(data2sdmean(data[1:2])$mean,data2sdmean(data[3:4])$mean,data2sdmean(data[5:6])$mean)
sd.mean=data2sdmean(tec.av)
rules=c("Et->Luciferase","E2+siRIP140->RIP140","E2+siLCoR->LCoR","E2->0")
matp=read.rules(rules)
#The variance of each variable was estimated employing an estimator optimized for a
#small sample size from Statistical Process Control theory (Wheeler and Chambers, 1992; Harter, 1960).
interval(sd.mean$mean,sd.ex,matp,nrep=6)
interval
interval(sd.mean$mean,sd.ex,matp,nrep=2)
#matp=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
matp=read.rules(c("RA+siLCoR->LCoR","RA+siRIP140->RIP140","Et->Hoxa5","RA->0"))
interval(sd.mean$mean,sd.ex,matp,nrep=6)
interval(sd.mean$mean,sd.ex,matp,nrep=2)
