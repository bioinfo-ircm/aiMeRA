rpa[!aux]=0
a=solve(res$link_matrix,-rpa)
if(!Rp)
{
glb=data[rownames(matp),lb]
a=(-glb*((a+2)/(a-2)))
}
if(!is.null(pred))
return(list(inferred=a,data=b))
else
{
warning("The inferred values should be validated by experimental data")
return(a)
}
}
}
ab.mra(data.mean,matp=matp,pred="E2+siLCoR+siRIP140",pert1="E2+siLCoR",
pert2="E2+siRIP140",ab=F)
mra=function (tab, matp, check = TRUE, Rp=FALSE)
{
if (check)
data.setup(tab, matp)
if (!is.matrix(matp))
matp = as.matrix(matp)
lb = colnames(matp)[colSums(matp) == 0]
if(!Rp)
{
glb = tab[rownames(matp), lb]
gl = tab[rownames(matp), colnames(matp)[colnames(matp)!=lb]]
Rp = as.matrix(2 * (gl - glb)/(gl + glb))
}
else
Rp=tab[rownames(matp), colnames(matp)[colnames(matp)!=lb]]
if (ncol(Rp) == 1)
{
rownames(Rp) = rownames(matp)
colnames(Rp) = colnames(matp)[colSums(matp) != 0]
}
if (any(rowSums(matp) == 0))
{
aux=matrix(0,ncol=sum(rowSums(matp)==0),nrow=nrow(Rp))
colnames(aux)=rep("bid",sum(rowSums(matp)==0))
rownames(aux)=rownames(Rp)
aux[rowSums(matp)==0,]=diag(ncol(aux))
Rp = cbind(Rp, aux)
matp = cbind(matp, aux)
}
matp = matp[,colSums(matp) != 0]
rp = solve(diag(diag(matp %*% solve(Rp))))
rownames(rp) = rownames(Rp)
colnames(rp) = names(sort(apply(matp, 2, function(x)which(x ==1))))
r = -rp %*% matp %*% solve(Rp)
return(list(link_matrix = r, global_matrix = Rp, local_matrix = rp))
}
ab.mra(data.mean,matp=matp,pred="E2+siLCoR+siRIP140",pert1="E2+siLCoR",
pert2="E2+siRIP140",ab=F)
ab.mra(data.mean,matp=matp,pred="E2+siLCoR+siRIP140",pert1="E2+siLCoR",
pert2="E2+siRIP140",ab=T)
ab.mra=function(data,matp,pred=NULL,pert1,pert2,inval=c(-2,2),step=0.1,Rp=FALSE,ab=TRUE)
{
if(!pert1%in%colnames(matp)|!pert2%in%colnames(matp))
stop("pert1 and pert2 should be perturbations as writen in column names of the the perturbation matrix")
res=mra(data,matp,check=F,Rp=ifelse(Rp,TRUE,FALSE))
rpa=diag(res$local_matrix)
coeff=seq(inval[1],inval[2],step)
lb = colnames(matp)[colSums(matp) == 0]
if(!is.null(pred))
{
if(!pred%in%colnames(data))
stop("pred should be the name of the column in data to be inferred")
b=data[rownames(matp),pred]
}
mult1=rep(0,ncol(res$local_matrix))
aux=colnames(res$local_matrix)%in%c(pert1,pert2)
if(ab&!is.null(pred))
{
errtot=vector()
for(k in coeff)
{
err=unlist(lapply(coeff,function(l) {
mult1[aux]=c(k,l)
a=solve(res$link_matrix,-rpa*mult1)
if(!Rp)
{
glb=data[rownames(matp),lb]
a=(-glb*((a+2)/(a-2)))
}
err=sqrt(sum((a-b)^2))
}
))
names(err)=paste0(k,",",coeff)
errtot=c(errtot,err)
}
errtot1=errtot[abs(errtot)==min(abs(errtot))]
albeta=as.numeric(unlist(strsplit(names(errtot1),",")))
mult1[aux]=albeta
pred=solve(res$link_matrix,-rpa*mult1)
if(!Rp)
{
glb=data[rownames(matp),lb]
pred=(-glb*((pred+2)/(pred-2)))
}
all_coeff_total=rep(0,ncol(res$local_matrix))
all_coeff_total[aux]=albeta
names(all_coeff_total)=rownames(res$link_matrix)
return(list(coeff.ab=round(all_coeff_total,digits = 1),inferred=pred,data=b))
}
else
{
rpa[!aux]=0
a=solve(res$link_matrix,-rpa)
if(!Rp)
{
glb=data[rownames(matp),lb]
a=(-glb*((a+2)/(a-2)))
}
if(!is.null(pred))
return(list(inferred=a,data=b))
else
{
warning("The inferred values should be validated by experimental data")
return(a)
}
}
}
ab.mra(data.mean,matp=matp,pred="E2+siLCoR+siRIP140",pert1="E2+siLCoR",
pert2="E2+siRIP140",ab=T)
ab.mra(data.mean,matp=matp,pert1="E2+siLCoR",
pert2="E2+siRIP140",ab=T)
inval=c(-2,2)
is.numeric(inval)
inval=c(-2,a)
inval=c(-2,"a")
is.numeric(inval)
rules=c("Et->Luciferase","E2+siRIP140->RIP140","E2+siLCoR->LCoR","E2->0","0->GREB1")
matp=read.rules(rules)
ab.mra(data.mean,matp=matp,pred="E2+siLCoR+siRIP140",pert1="E2+siLCoR",
pert2="E2+siRIP140",ab=FALSE)
ab.mra(data.mean,matp=matp,pred="E2+siLCoR+siRIP140",pert1="E2+siLCoR",
pert2="E2+siRIP140")
devtools::document()
rm(list = c("ab.mra", "mra"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
-100*((-0.12+2)/(-0.12-2))
-100*((-0.25+2)/(-0.25-2))
-100*((-0.26+2)/(-0.26-2))
-100*((-0.65-2)/(-0.26+2))
-100*((-0.65+2)/(-0.26-2))
-100*((-0.652+2)/(-0.652-2))
-100*((-0.653+2)/(-0.653-2))
library(aiMeRA)
?mra
genes=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/Publi/E2-chipseq-884-genes.txt",sep="\t",header = F)
genes
genes=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/Publi/E2-chipseq-884-genes.txt",sep="\t",header = F)$V1
genes
genes=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/Publi/E2-chipseq-884-genes.txt",stringsAsFactors = F,sep="\t",header = F)$V1
genes
?ab.mra
library(aiMeRA)
?ab.mra
library(Rd2roxygen)
library(rmarkdown)
Rp1
#####? partir des Rps######
source("C:/Users/gabriel.jimenez/Dropbox/Th?se/dualpancher/some_stuff.R")
setwd("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/")
rules=read.rules(c("E2+siLCoR->LCOR","E2+siRIP140->NRIP1","Et->PGR","E2->0"))
rules=read.rules(c("RA+siLCoR->LCOR","RA+siRIP140->NRIP1","Et->HOXA5","RA->0"))
#####? partir des Rps######
source("C:/Users/gabriel.jimenez/Dropbox/Th?se/dualpancher/some_stuff.R")
#####? partir des Rps######
source("C:/Users/gabriel.jimenez/Dropbox/These/dualpancher/some_stuff.R")
#####? partir des Rps######
source("C:/Users/gabriel.jimenez/Dropbox/Thèse/dualpancher/some_stuff.R")
setwd("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/")
rules=read.rules(c("E2+siLCoR->LCOR","E2+siRIP140->NRIP1","Et->PGR","E2->0"))
lb = colnames(rules)[colSums(rules) == 0]
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
#####? partir des Rps######
source("C:/Users/gabriel.jimenez/Dropbox/Thèse/dualpancher/some_stuff.R")
setwd("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/")
rules=read.rules(c("E2+siLCoR->LCOR","E2+siRIP140->NRIP1","Et->PGR","E2->0"))
genes=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/Publi/E2-chipseq-884-genes.txt",
sep="\t",header = F)$V1
#rules=read.rules(c("RA+siLCoR->LCOR","RA+siRIP140->NRIP1","Et->HOXA5","RA->0"))
lb = colnames(rules)[colSums(rules) == 0]
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
x1=x1[rownames(x1)%in%c(rownames(rules),genes),colnames(rules)]
x2=x2[rownames(x2)%in%c(rownames(rules),genes),colnames(rules)]
Rp1=global.matrix(x1,lb=lb)
Rp2=global.matrix(x2,lb=lb)
Rp1
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
Rp1=global.matrix(x1,lb=lb)
Rp2=global.matrix(x2,lb=lb)
Rp1
Rp1=Rp1[genes,]
Rp1
nrow(Rp1)
Rp2=Rp2[genes,]
Rp2
Rps=Rp1-Rp2
Rps=Rps[,colnames(rules)[-]]
rules
Rps=Rps[,colnames(rules)[-4]]
Rps
hist(as.vector(Rps),breaks = 50)
hist(as.vector(Rps),breaks = 50,probability = T)
hist(as.vector(Rps),breaks = 50,probability = T,xlab = "R1-R2",main = "")
hist(as.vector(Rps),breaks = 50,probability = T,xlab = "R1 - R2",main = "")
hist(as.vector(Rps),breaks = 50,probability = T,xlab = "R(replica 1) - R(replica 2)",main = "")
hist(as.vector(Rps),breaks = 50,xlab = "R(replica 1) - R(replica 2)",main = "")
install.packages("Rd2md")
library(Rd2md)
Rd2markdown(rdfile = "C:\Users\gabriel.jimenez\Documents/GitHub/aiMeRA/man/ab.mra.Rd",outfile="C:\Users\gabriel.jimenez\Documents/old_scripts_package/ab.mra.md")
Rd2markdown(rdfile = "C:/Users/gabriel.jimenez/Documents/GitHub/aiMeRA/man/ab.mra.Rd",outfile="C:/Users/gabriel.jimenez/Documents/old_scripts_package/ab.mra.md")
hist(as.vector(Rps),breaks = 50,xlab = "R(replica 1) - R(replica 2)",main = "",freq = F)
lines(seq(-5,5,by.5),dnorm(seq(-5,5,by.5),mean(Rps),sd(Rps)),col="blue")
lines(seq(-5,5,by=.5),dnorm(seq(-5,5,by=.5),mean(Rps),sd(Rps)),col="blue")
Rps
mean(Rps)
Rps=as.vector(Rps)
Rps=Rps[!is.nan(Rps)]
Rps
hist(as.vector(Rps),breaks = 50,xlab = "R(replica 1) - R(replica 2)",main = "",freq = F)
mean(Rps)
sd(Rps)
lines(seq(-5,5,by=.5),dnorm(seq(-5,5,by=.5),mean(Rps),sd(Rps)),col="blue")
lines(seq(-5,5,by=.05),dnorm(seq(-5,5,by=.05),mean(Rps),sd(Rps)),col="blue")
Rps
install.packages(c("fastGraph", "logspline"))
library(fitdistrplus)
library(logspline)
library(fastGraph)
fit_n  <- fitdist(Rps, "norm")
summary(fit_n)
plot.legend <- c("normal")
denscomp(list(fit_n, fit_l, fit_c), legendtext = plot.legend,lwd =2)
denscomp(fit_n, legendtext = plot.legend,lwd =2)
denscomp(fit_n, legendtext = plot.legend,lwd =2,breaks=50)
?denscomp
hist(as.vector(Rps),breaks = 50,xlab = "R(replica 1) - R(replica 2)",main = "Histogram and theoretical normal density",freq = F)
lines(seq(-5,5,by=.05),dnorm(seq(-5,5,by=.05),mean(Rps),sd(Rps)),col="blue",lwd=2,color="red")
length(Rps)
Rps
fit_n  <- fitdist(Rps, "norm")
summary(fit_n)
plot.legend <- c("normal")
denscomp(fit_n, legendtext = plot.legend,lwd =2,breaks=50)
denscomp(fit_n, legendtext = plot.legend,lwd =2)
cdfcomp (list(fit_n, fit_l, fit_c), legendtext = plot.legend)
getwd()
write.table(Rps,"Rps.txt",quote = F)
write.table(Rps,"Rps.txt",quote = F,row.names = F,col.names = F)
hist(Rps,breaks = 50)
lines(density(Rps))
hist(as.vector(Rps),breaks = 50,xlab = "R(replica 1) - R(replica 2)",main = "Histogram and theoretical normal density",freq = F)
lines(density(Rps))
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
Rp1=global.matrix(x1,lb=lb)
Rp2=global.matrix(x2,lb=lb)
Rps=c(as.vector(Rp1),as.vector(Rp2))
Rps
Rps=Rps[!is.nan(Rps)]
hist(as.vector(Rps),breaks = 50,xlab = "R(replica 1) - R(replica 2)",main = "Histogram and theoretical normal density",freq = F)
lines(seq(-5,5,by=.05),dnorm(seq(-5,5,by=.05),mean(Rps),sd(Rps)),col="blue",lwd=2,color="red")
hist(as.vector(Rps),breaks = 50,xlab = "R(replica 1) - R(replica 2)",main = "Histogram and theoretical normal density",freq = F)
lines(seq(-2,2,by=.05),dnorm(seq(-5,5,by=.05),mean(Rps),sd(Rps)),col="blue",lwd=2,color="red")
hist(as.vector(Rps),breaks = 50,xlab = "R(replica 1) - R(replica 2)",main = "Histogram and theoretical normal density",freq = F)
lines(seq(-2,2,by=.05),dnorm(seq(-5,5,by=.05),mean(Rps),sd(Rps)),col="blue",lwd=2,color="red")
lines(seq(-2,2,by=.05),dnorm(seq(-2,2,by=.05),mean(Rps),sd(Rps)),col="blue",lwd=2,color="red")
lines(seq(-2,2,by=.05),dnorm(seq(-2,2,by=.05),mean(Rps),sd(Rps)),col="blue",lwd=2,col="red")
lines(seq(-2,2,by=.05),dnorm(seq(-2,2,by=.05),mean(Rps),sd(Rps)),col="blue",lwd=2)
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
x1=x1[rownames(x1)%in%c(rownames(rules),genes),colnames(rules)]
x2=x2[rownames(x2)%in%c(rownames(rules),genes),colnames(rules)]
Rp1=global.matrix(x1,lb=lb)
Rp2=global.matrix(x2,lb=lb)
Rps=c(as.vector(Rp1),as.vector(Rp2))
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
x1=x1[rownames(x1)%in%c(rownames(rules),genes),colnames(rules)]
x2=x2[rownames(x2)%in%c(rownames(rules),genes),colnames(rules)]
Rp1=global.matrix(x1,lb=lb)
Rp2=global.matrix(x2,lb=lb)
Rps=c(as.vector(Rp1),as.vector(Rp2))
hist(as.vector(Rps),breaks = 50,xlab = "R(replica 1) - R(replica 2)",main = "Histogram and theoretical normal density",freq = F)
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
genes
x1=x1[rownames(x1)%in%c(rownames(rules),genes),colnames(rules)]
x2=x2[rownames(x2)%in%c(rownames(rules),genes),colnames(rules)]
x1
#####? partir des Rps######
source("C:/Users/gabriel.jimenez/Dropbox/Thèse/dualpancher/some_stuff.R")
setwd("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/")
rules=read.rules(c("E2+siLCoR->LCOR","E2+siRIP140->NRIP1","Et->PGR","E2->0"))
genes=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/Publi/E2-chipseq-884-genes.txt",
sep="\t",header = F)$V1
#rules=read.rules(c("RA+siLCoR->LCOR","RA+siRIP140->NRIP1","Et->HOXA5","RA->0"))
lb = colnames(rules)[colSums(rules) == 0]
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
Rp1=global.matrix(x1,lb=lb)
Rp2=global.matrix(x2,lb=lb)
Rp1=Rp1[genes,colnames(rules)[-4]]
Rp1
Rp1=global.matrix(x1,lb=lb)
Rp1=Rp1[genes,colnames(rules)[-4]]
Rp2=global.matrix(x2,lb=lb)
Rp2=Rp2[genes,colnames(rules)[-4]]
Rp1
Rp2
setwd("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/activity_reporters/")
data=data.setup(list(estr1_A,estr1_B,estr2_A,estr2_B,estr3_A,estr3_B))
data=data2sdmean(data)
rules=read.rules(c("E2+siLCoR->LCoR","E2+siRIP140->RIP140","Et->Luciferase","E2->0"))
chip=read.table("E2-cross-chipseq-full-2.txt",stringsAsFactors = F)$V1
e2genes=read.table("gene-selection-E2-Et.txt",sep="\t",header = T,stringsAsFactors = F,row.names = 1)
ragenes=read.table("gene-selection-RA-Et.txt",sep="\t",header = T,stringsAsFactors = F,row.names = 1)
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
xrnaseq=(x2+x1)/2
xrnaseq=xrnaseq[c(rownames(e2genes)[rownames(e2genes)%in%chip],"LCOR"),]
############################
lb="E2"
nrow(xrnaseq)
xind=read.rules(c("E2+siLCoR->LCOR","E2+siRIP140->NRIP1","Et->Luciferase","E2->0"))
res.luc=mra(data$mean,rules)
genes=rownames(xrnaseq)
no=vector()
tab=data.frame()
for(rep in genes) {
print(rep)
if(rep%in%c("NRIP1","LCOR"))
next()
rownames(xind)[3]=rep
res=tryCatch(mra(xrnaseq,xind),error=function(e)e)
if(any(class(res)=="error"))
{
no=c(no,rep)
next()
}
diag(res$link_matrix)=NA
ligne=round(as.vector(res$link_matrix)[!is.na(as.vector(res$link_matrix))],digits = 4)
tab=rbind(tab,ligne)
}
rownames(tab)=genes[!genes%in%c("NRIP1","LCOR")]
nrow(tab)
no
mra
#####? partir des Rps######
source("C:/Users/gabriel.jimenez/Dropbox/Thèse/dualpancher/some_stuff.R")
setwd("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/")
rules=read.rules(c("E2+siLCoR->LCOR","E2+siRIP140->NRIP1","Et->PGR","E2->0"))
genes=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/Publi/E2-chipseq-884-genes.txt",
sep="\t",header = F)$V1
#rules=read.rules(c("RA+siLCoR->LCOR","RA+siRIP140->NRIP1","Et->HOXA5","RA->0"))
lb = colnames(rules)[colSums(rules) == 0]
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
Rp1=global.matrix(x1,lb=lb)
Rp1=global.matrix(x1,lb=lb)
Rp1=Rp1[genes,colnames(rules)[-4]]
Rp2=global.matrix(x2,lb=lb)
Rp2=Rp2[genes,colnames(rules)[-4]]
Rps=c(as.vector(Rp1[,1]),as.vector(Rp2[,1]))
Rps=Rps[!is.nan(Rps)]
hist(as.vector(Rps),breaks = 50,xlab = "R(replica 1) - R(replica 2)",main = "Histogram and theoretical normal density",freq = F)
lines(seq(-2,2,by=.05),dnorm(seq(-2,2,by=.05),mean(Rps),sd(Rps)),col="blue",lwd=2,color="red")
#####? partir des Rps######
source("C:/Users/gabriel.jimenez/Dropbox/Thèse/dualpancher/some_stuff.R")
setwd("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/mra/")
rules=read.rules(c("E2+siLCoR->LCOR","E2+siRIP140->NRIP1","Et->PGR","E2->0"))
genes=read.table("C:/Users/gabriel.jimenez/Dropbox/estrogen_receptors/Publi/E2-chipseq-884-genes.txt",
sep="\t",header = F)$V1
#rules=read.rules(c("RA+siLCoR->LCOR","RA+siRIP140->NRIP1","Et->HOXA5","RA->0"))
lb = colnames(rules)[colSums(rules) == 0]
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
Rp1=global.matrix(x1,lb=lb)
Rp1=Rp1[genes,colnames(rules)[-4]]
Rp2=global.matrix(x2,lb=lb)
Rp2=Rp2[genes,colnames(rules)[-4]]
#Rps=c(as.vector(Rp1[,1]),as.vector(Rp2[,1]))
Rps=Rp1-Rp2
Rps
Rp1
Rp1
x1[rownames(Rp1),]
Rp1
x1[rownames(Rp1),colnames(Rp1)]
Rp1
x1[rownames(Rp1),colnames(rules)]
e2genes=read.table("gene-selection-E2-Et.txt",sep="\t",header = T,stringsAsFactors = F,row.names = 1)
head(e2genes)
e2genes["ALX1",]
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
xrnaseq=(x2+x1)/2
xrnaseq=xrnaseq[c(rownames(e2genes)[rownames(e2genes)%in%chip],"LCOR"),]
xrnaseq["ALX1",]
genes=rownames(genes)
genes
genes=rownames(xrnaseq)
genes
genes[genes=="LCOR"]
genes[genes=="ALX1"]
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
xrnaseq=(x2+x1)/2
xrnaseq=xrnaseq[c(rownames(e2genes)[rownames(e2genes)%in%chip]),]
genes=rownames(xrnaseq)
genes[genes=="ALX1"]
x1=as.matrix(read.table("rnaseq_transA.csv",sep="\t",header = T,check.names = F,row.names = 1))
x2=as.matrix(read.table("rnaseq_transB.csv",sep="\t",header = T,check.names = F,row.names = 1))
Rp1=global.matrix(x1,lb=lb)
Rp1=Rp1[genes,colnames(rules)[-4]]
Rp1
Rp2=global.matrix(x2,lb=lb)
Rp2=Rp2[genes,colnames(rules)[-4]]
Rps=c(as.vector(Rp1[,1]),as.vector(Rp2[,1]))
hist(Rps,breaks = 50)
fit_n  <- fitdist(Rps, "norm")
denscomp(fit_n, legendtext = plot.legend,lwd =2)
denscomp(fit_n, legendtext = plot.legend,lwd =2,breaks=50)
test=Rps[,1]
Rps
Rp1=global.matrix(x1,lb=lb)
Rp1=Rp1[genes,colnames(rules)[-4]]
Rp2=global.matrix(x2,lb=lb)
Rp2=Rp2[genes,colnames(rules)[-4]]
Rps=Rp1-Rp2
Rps
#Rps=c(as.vector(Rp1[,1]),as.vector(Rp2[,1]))
Rps=Rp1-Rp2
fit_n  <- fitdist(as.vector(Rps), "norm")
denscomp(fit_n, legendtext = plot.legend,lwd =2,breaks=50)
fit_n  <- fitdist(as.vector(Rps[,1]), "norm")
denscomp(fit_n, legendtext = plot.legend,lwd =2,breaks=50)
nrow(genes)
nrow(Rps)
write.table(Rps,)
getwd()
write.table(Rps,"Diff_Rps.txt",quote = F,sep = "\t")
Rps
Rp1=global.matrix(x1,lb=lb)
Rp1=Rp1[genes,colnames(rules)[-4]]
Rp2=global.matrix(x2,lb=lb)
Rp2=Rp2[genes,colnames(rules)[-4]]
ms=abs(Rp1-Rp2)
repeat
{
Rb=apply(ms,2,mean)
#Rb=mean(ms)
sig=Rb/1.128
lcs=sig*2.834
test=ms>lcs
test=rowSums(test)
test=names(test)[test!=0]
if(length(test)==0)
break
else
ms=ms[!rownames(ms)%in%test,]
}
ms
nrow(ms)
#Rps=c(as.vector(Rp1[,1]),as.vector(Rp2[,1]))
#Rps=as.vector(Rp1-Rp2)
Rps=Rp1-Rp2
Rps[rownames(ms),]
Rps=Rps[rownames(ms),]
fit_n  <- fitdist(as.vector(Rps[,1]), "norm")
denscomp(fit_n, legendtext = plot.legend,lwd =2,breaks=50)
Rps
nrow(Rps)
fit_n  <- fitdist(as.vector(Rps[,2]), "norm")
summary(fit_n)
plot.legend <- c("normal")
denscomp(fit_n, legendtext = plot.legend,lwd =2,breaks=50)
fit_n  <- fitdist(as.vector(Rps[,3]), "norm")
summary(fit_n)
plot.legend <- c("normal")
denscomp(fit_n, legendtext = plot.legend,lwd =2,breaks=50)
getwd()
Rd2markdown("C:/Users/gabriel.jimenez/Documents/GitHub/aiMeRA/man/ab.mra.Rd",outfile = "C:/Users/gabriel.jimenez/Documents/old_scripts_package/ab_mra")
Rd2markdown("C:/Users/gabriel.jimenez/Documents/GitHub/aiMeRA/man/ab.mra.Rd",outfile = "C:/Users/gabriel.jimenez/Documents/old_scripts_package/ab_mra")
Rd2markdown("C:/Users/gabriel.jimenez/Documents/GitHub/aiMeRA/man/mra.Rd",outfile = "C:/Users/gabriel.jimenez/Documents/old_scripts_package/mra")
Rd2markdown("C:/Users/gabriel.jimenez/Documents/GitHub/aiMeRA/man/netgraph.Rd",outfile = "C:/Users/gabriel.jimenez/Documents/old_scripts_package/netgraph")
?rnorm
Rd2markdown("C:/Users/gabriel.jimenez/Documents/GitHub/aiMeRA/man/interval.Rd",outfile = "C:/Users/gabriel.jimenez/Documents/old_scripts_package/interval")
library(aiMeRA)
vignette(aiMera)
vignette("aiMera")
vignette("aiMeRA")
vignette("limma")
vignette("lima")
vignette("ComplexHeatmap")
vignette("Complexheatmap")
vignette("complexheatmap")
Rd2markdown("C:/Users/gabriel.jimenez/Documents/GitHub/aiMeRA/man/ab.mra.Rd",outfile = "C:/Users/gabriel.jimenez/Documents/old_scripts_package/ab_mra")
